# Название нашего CI/CD pipeline
name: Django CI

# Указываем, при каких событиях запускается pipeline (при push и pull request)
on: [ push, pull_request ]

jobs:
  # Первый этап - проверка кода линтером
  lint:
    runs-on: ubuntu-latest
    steps:
      # Шаг 1: Получаем код из репозитория
      - name: Check out code
        uses: actions/checkout@v3

      # Шаг 2: Устанавливаем Python нужной версии
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Шаг 3: Устанавливаем flake8 для проверки кода
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      # Шаг 4: Запускаем проверку кода через flake8
      - name: Run Flake8
        run: flake8 .

  # Второй этап - запуск тестов
  test:
    # Запускаем тесты только после успешного прохождения линтера
    needs: lint
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Получаем код из репозитория
      - name: Check out code
        uses: actions/checkout@v3

      # Шаг 2: Устанавливаем Python нужной версии
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Шаг 3: Устанавливаем зависимости проекта
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Шаг 4: Запускаем тесты (используется SQLite по умолчанию)
      - name: Run tests
        run: python manage.py test

  # Третий этап - сборка Docker образа
  build:
    # Собираем Docker образ только после успешного прохождения тестов
    needs: test
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Получаем код из репозитория
      - name: Check out code
        uses: actions/checkout@v3

      # Шаг 2: Авторизуемся в Docker Hub используя секреты
      - name: Log in in Docker hub
        run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      # Шаг 3: Собираем Docker образ с тегом на основе SHA коммита
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }} .

      # Шаг 4: Отправляем собранный образ в Docker Hub
      - name: Push Docker image in Docker hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}

  # Четвертый этап - деплой на сервер
  deploy:
    # Деплоим только после успешной сборки Docker образа
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Настраиваем SSH для подключения к серверу
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.1
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      # Шаг 2: Подключаемся к серверу и деплоим приложение через Docker
      - name: Deploy to Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            # Скачиваем новый образ с Docker Hub
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}
            # Останавливаем старый контейнер если он есть
            docker stop myapp || true
            # Удаляем старый контейнер если он есть
            docker rm myapp || true
            # Запускаем новый контейнер
            docker run -d --name myapp -p 80:8000 ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}
          EOF
